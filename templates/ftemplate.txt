#### main

C
C
C This file was generated by MCWRAP, author: Jeremy Magland
C You should not edit this file.
C See https://github.com/magland/mcwrap
C 
C 

#include "fintrf.h"

C====================================================================
C====================================================================

C     Gateway routine
      subroutine mexFunction(nlhs, plhs, nrhs, prhs)

C     Declarations
      implicit none
      integer jj
      character*120 debug_line

C     mexFunction arguments:
      mwPointer plhs(*), prhs(*)
      integer nlhs, nrhs

C     Function declarations:
      mwPointer mxGetPr
      mwPointer mxCreateDoubleMatrix
      integer mxIsNumeric
      mwPointer mxGetM, mxGetN

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C     Declare inputs:
%foreach input
    %if $ptype$=int
        ^template fdeclare_input_int
    %end if $ptype$=int
    %if $ptype$=double
        ^template fdeclare_input_double
    %end if $ptype$=double
    %if $ptype$=double*
        ^template fdeclare_input_double_array
    %end if $ptype$=double*
%end foreach input

C     Declare outputs:
%foreach output
    %if $ptype$=int
        ^template fdeclare_output_int
    %end if $ptype$=int
    %if $ptype$=double
        ^template fdeclare_output_double
    %end if $ptype$=double
    %if $ptype$=double*
        ^template fdeclare_output_double_array
    %end if $ptype$=double*
%end foreach output

C-----Check the number of inputs/outputs
      if (nlhs==0) then
          nlhs=1
      end if
      if(nrhs .ne. $num_inputs$) then
         call mexErrMsgIdAndTxt ('MCWRAP:IO',
     +                           'Incorrect number of input')
      elseif(nlhs .gt. $num_outputs$) then
         call mexErrMsgIdAndTxt ('MCWRAP:IO','Too many outputs.')
      endif
    
C-----Setup the inputs
%foreach input
    %if $ptype$=int
        ^template fsetup_input_int
    %end if $ptype$=int
    %if $ptype$=double
        ^template fsetup_input_double
    %end if $ptype$=double
    %if $ptype$=double*
        ^template fsetup_input_double_array
    %end if $ptype$=double*
%end foreach input
    
C-----Setup the outputs
%foreach output
    %if $ptype$=int
        ^template fsetup_output_int
    %end if $ptype$=int
    %if $ptype$=double
        ^template fsetup_output_double
    %end if $ptype$=double
    %if $ptype$=double*
        ^template fsetup_output_double_array
    %end if $ptype$=double*
%end foreach output
    
C-----Run the subroutine
        call $function_name$($arguments$);
   
C-----Free the inputs
%foreach input
    %if $ptype$=double*
        ^template ffree_input_double_array
    %end if $ptype$=double*
%end foreach input

C-----Set the outputs
%foreach output
    %if $ptype$=int
        ^template fset_output_int
    %end if $ptype$=int
    %if $ptype$=double
        ^template fset_output_double
    %end if $ptype$=double
    %if $ptype$=double*
        ^template fset_output_double_array
    %end if $ptype$=double*
%end foreach output

C-----We are done

        return
        end

#### fdeclare_input_double

        mwPointer p_input_$pname$
        real*8 input_$pname$

#### fdeclare_input_double_array

        mwPointer p_input_$pname$
        real*8, ALLOCATABLE ::
     +    input_$pname$(:)

#### fdeclare_input_int

        mwPointer p_input_$pname$
        Integer input_$pname$
        real*8 input_$pname$_double

#### fdeclare_output_double

CCC Scalar output not yet supported!

#### fdeclare_output_double_array

        mwPointer p_output_$pname$
        real*8, ALLOCATABLE ::
     +    output_$pname$(:)

#### fdeclare_output_int

CCC Scalar output not yet supported!

#### ffree_input_double_array

        DEALLOCATE(input_$pname$)

#### fset_output_double

CCC Scalar outputs not yet supported

#### fset_output_double_array

        if ($pindex$ .LE. nlhs) then
            call mxCopyReal8ToPtr(
     +         output_$pname$,p_output_$pname$,
     +         int($total_size$))
        end if
        DEALLOCATE(output_$pname$)

#### fset_output_int

CCC Scalar outputs not yet supported

#### fsetup_input_double

        p_input_$pname$=
     +    mxGetPr(prhs($pindex$));
        call mxCopyPtrToReal8(
     +    p_input_$pname$,
     +    input_$pname$,1)

#### fsetup_input_double_array

        p_input_$pname$=
     +    mxGetPr(prhs($pindex$));
        ALLOCATE(input_$pname$($total_size$))
        call mxCopyPtrToReal8(
     +    p_input_$pname$,
     +    input_$pname$,int($total_size$))

#### fsetup_input_int

        p_input_$pname$=
     +    mxGetPr(prhs($pindex$));
        call mxCopyPtrToReal8(
     +    p_input_$pname$,
     +    input_$pname$_double,1)
        input_$pname$=int(input_$pname$_double)

#### fsetup_output_double

CCC Scalar output not yet supported

#### fsetup_output_double_array

        if ($pindex$ .LE. nlhs) then
            plhs($pindex$)=
     +          mxCreateDoubleMatrix($dimensions$,0)
            p_output_$pname$=
     +          mxGetPr(plhs($pindex$))
        end if
         ALLOCATE(
     + output_$pname$(
     +   int($total_size$)))
        
#### fsetup_output_int

CCC Scalar output not yet supported

#### end